function solution(k, tangerine) {
  //tangerine 8개 중에 k개만큼 판매하고 싶다고 가정하면, 가장 적은 크기의 귤인 1,4를 제외하고 나서
  // 크기가 2,3,5인 tangerine은 각각 2개가 되므로 총 6개가 되고 이들 종류는 3가지다.

  const obj = {};
  for (let i = 0; i < tangerine.length; i++) {
    obj[tangerine[i]] = ++obj[tangerine[i]] || 1;
  }

  const values = Object.values(obj).sort((a, b) => b - a); //[2,2,2,1,2]

  let sum = 0;
  let result = 0;

  for (const value of values) {
    result++;
    sum += value;

    if (sum >= k) break;
  }
  return result;
}

// console.log(solution(6, [1, 3, 2, 5, 4, 5, 2, 3]));

/*정확성  테스트
테스트 1 〉	통과 (5.87ms, 39.7MB)
테스트 2 〉	통과 (6.95ms, 39.7MB)
테스트 3 〉	통과 (5.85ms, 39.6MB)
테스트 4 〉	통과 (5.78ms, 39.6MB)
테스트 5 〉	통과 (5.86ms, 39.5MB)
테스트 6 〉	통과 (5.90ms, 39.6MB)
테스트 7 〉	통과 (6.05ms, 39.6MB)
테스트 8 〉	통과 (5.92ms, 39.6MB)
테스트 9 〉	통과 (6.03ms, 39.6MB)
테스트 10 〉	통과 (5.95ms, 39.7MB)
테스트 11 〉	통과 (0.11ms, 33.5MB)
테스트 12 〉	통과 (0.08ms, 33.4MB)
테스트 13 〉	통과 (0.08ms, 33.4MB)
테스트 14 〉	통과 (0.07ms, 33.4MB)
테스트 15 〉	통과 (0.07ms, 33.6MB)
테스트 16 〉	통과 (0.07ms, 33.6MB)
테스트 17 〉	통과 (0.07ms, 33.4MB)
테스트 18 〉	통과 (0.07ms, 33.4MB)
테스트 19 〉	통과 (0.07ms, 33.5MB)
테스트 20 〉	통과 (0.08ms, 33.4MB)
테스트 21 〉	통과 (0.26ms, 33.5MB)
테스트 22 〉	통과 (0.40ms, 33.5MB)
테스트 23 〉	통과 (0.42ms, 33.8MB)
테스트 24 〉	통과 (0.77ms, 33.8MB)
테스트 25 〉	통과 (5.83ms, 38.2MB)
테스트 26 〉	통과 (14.65ms, 41.4MB)
테스트 27 〉	통과 (86.81ms, 60.6MB)
테스트 28 〉	통과 (55.10ms, 48.6MB)
테스트 29 〉	통과 (84.39ms, 54.5MB)
테스트 30 〉	통과 (106.38ms, 60.7MB)
테스트 31 〉	통과 (24.01ms, 40MB)
테스트 32 〉	통과 (25.27ms, 40.6MB)
테스트 33 〉	통과 (126.19ms, 57.6MB)
테스트 34 〉	통과 (70.75ms, 54.3MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0*/
