function solution(s) {
  const answer = [];
  const map = new Map();
  for (let i = 0; i < s.length; i++) {
    if (map.has(s[i])) answer.push(i - map.get(s[i]));
    else answer.push(-1);
    map.set(s[i], i);
  }

  return answer;
}

// 정확성  테스트
// 테스트 1 〉	통과 (0.05ms, 33.4MB)
// 테스트 2 〉	통과 (0.14ms, 33.5MB)
// 테스트 3 〉	통과 (0.15ms, 33.5MB)
// 테스트 4 〉	통과 (0.29ms, 33.6MB)
// 테스트 5 〉	통과 (5.03ms, 38.2MB)
// 테스트 6 〉	통과 (0.78ms, 37.2MB)
// 테스트 7 〉	통과 (5.45ms, 38.1MB)
// 테스트 8 〉	통과 (0.64ms, 37MB)
// 테스트 9 〉	통과 (5.41ms, 38.1MB)
// 테스트 10 〉	통과 (0.43ms, 33.7MB)
// 테스트 11 〉	통과 (5.31ms, 38.2MB)
// 테스트 12 〉	통과 (0.04ms, 33.5MB)
// 테스트 13 〉	통과 (0.05ms, 33.4MB)
// 테스트 14 〉	통과 (0.24ms, 33.5MB)
// 테스트 15 〉	통과 (0.05ms, 33.5MB)
// 테스트 16 〉	통과 (0.13ms, 33.5MB)
// 테스트 17 〉	통과 (0.14ms, 33.5MB)
// 테스트 18 〉	통과 (0.42ms, 33.7MB)
// 테스트 19 〉	통과 (0.87ms, 33.7MB)
// 테스트 20 〉	통과 (0.20ms, 33.5MB)
// 테스트 21 〉	통과 (0.19ms, 33.5MB)
// 테스트 22 〉	통과 (0.89ms, 37.4MB)
// 테스트 23 〉	통과 (0.19ms, 33.6MB)
// 테스트 24 〉	통과 (0.21ms, 33.5MB)
// 테스트 25 〉	통과 (0.26ms, 33.6MB)
// 테스트 26 〉	통과 (0.15ms, 33.6MB)
// 테스트 27 〉	통과 (0.24ms, 33.5MB)
// 테스트 28 〉	통과 (0.39ms, 33.6MB)
// 테스트 29 〉	통과 (0.04ms, 33.4MB)
// 테스트 30 〉	통과 (5.51ms, 38.2MB)
// 채점 결과
// 정확성: 100.0
// 합계: 100.0 / 100.0
