function solution(elements) {
  // 순서대로면 정렬?
  // 길이에 대한 변수 설정
  // 길이가 2 이상일때 elements의 각 요소를 길이만큼 더하기

  // [7, 9, 1, 1, 4]가 주어졌을 때
  // 길이 1 : 1은 중복이므로 1,4,7,9
  // 길이 2 : 1 + 1 = 2, 1 + 4 = 5, 1 + 9 = 10, 4 + 7 = 11, 7 + 9 = 16
  // (1 + 7은 그림상에서 연속되어 있지 않기 때문에 제외)

  // 비슷한 패턴으로 연속되어 있지 않은 경우를 제외하고 길이만큼 더한 결과를 배열에 담으면
  // [1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22]가 나오고 총 개수는 18

  const sumSet = new Set();

  const len = elements.length;
  //길이가 1부터 시작하기 때문에 i = 1부터 시작
  for (let i = 1; i <= len; i++) {
    let sum = 0; // 합을 위한 변수
    for (let j = 0; j < len; j++) {
      if (j === 0) {
        for (let k = 0; k < i; k++) sum += elements[k]; // sum = 7
      } else {
        sum -= elements[j - 1]; // j = 1,sum=7->0 / j = 2, sum=9->0 / j = 3, sum=1->0 / j=4, sum=1->0
        sum += elements[(j + i - 1) % len]; // j=1,i=1, sum=9 / j=2,i=1, sum=1 / j=3, i=1 , sum =1 / j=4,i=1 sum = 4
      }
      sumSet.add(sum); // {7,9,1,4,16,10,2,5,11,17,6,12,20,18,15,13,21,22}
    }
  }
  return sumSet.size;
}

// console.log(solution([7,9,1,1,4]))

/*정확성  테스트
정확성  테스트
테스트 1 〉	통과 (0.05ms, 33.6MB)
테스트 2 〉	통과 (6.45ms, 39.1MB)
테스트 3 〉	통과 (10.55ms, 41.6MB)
테스트 4 〉	통과 (13.59ms, 41.6MB)
테스트 5 〉	통과 (22.23ms, 46.6MB)
테스트 6 〉	통과 (28.36ms, 46.7MB)
테스트 7 〉	통과 (43.18ms, 56.7MB)
테스트 8 〉	통과 (52.54ms, 56.8MB)
테스트 9 〉	통과 (57.63ms, 57.1MB)
테스트 10 〉	통과 (71.44ms, 57.2MB)
테스트 11 〉	통과 (24.61ms, 46.6MB)
테스트 12 〉	통과 (28.50ms, 46.6MB)
테스트 13 〉	통과 (33.31ms, 46.5MB)
테스트 14 〉	통과 (43.92ms, 57.1MB)
테스트 15 〉	통과 (60.26ms, 57.1MB)
테스트 16 〉	통과 (54.21ms, 57.2MB)
테스트 17 〉	통과 (51.48ms, 57MB)
테스트 18 〉	통과 (56.57ms, 56.7MB)
테스트 19 〉	통과 (57.99ms, 57.2MB)
테스트 20 〉	통과 (73.13ms, 57.1MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0*/
