/**
채점을 시작합니다.
정확성  테스트
테스트 1 〉	통과 (0.24ms, 33.2MB)
테스트 2 〉	통과 (0.25ms, 33.5MB)
테스트 3 〉	통과 (0.19ms, 33.4MB)
테스트 4 〉	통과 (0.13ms, 33.4MB)
테스트 5 〉	통과 (0.19ms, 33.5MB)
테스트 6 〉	통과 (0.23ms, 33.4MB)
테스트 7 〉	통과 (0.22ms, 33.4MB)
테스트 8 〉	통과 (0.22ms, 33.4MB)
테스트 9 〉	통과 (0.09ms, 33.5MB)
테스트 10 〉	통과 (0.09ms, 33.5MB)
테스트 11 〉	통과 (0.22ms, 33.4MB)
테스트 12 〉	통과 (0.43ms, 33.5MB)
테스트 13 〉	통과 (0.39ms, 33.5MB)
테스트 14 〉	통과 (0.47ms, 33.5MB)
테스트 15 〉	통과 (0.29ms, 33.5MB)
테스트 16 〉	통과 (0.35ms, 33.5MB)
테스트 17 〉	통과 (0.52ms, 33.5MB)
테스트 18 〉	통과 (0.33ms, 33.5MB)
테스트 19 〉	통과 (0.24ms, 33.5MB)
테스트 20 〉	통과 (0.28ms, 33.6MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0
 */

function solution(babbling) {
  const array = [0, "aya", "ye", "woo", "ma"];
  babbling = babbling
    .map((el) => {
      for (let i = 1; i <= 5; i++) {
        el = el.replaceAll(array[i], i);
      }
      return el;
    })
    // 정규표현식 \number : number번째 그룹(하위 표현식) 역참조
    // number번째 그룹에 해당하는 문자를 다시 참조하는 것.
    // 아래 정규식은 1~5 중에 두 번 이상 연속되어 사용된 것이 있는지 확인한다.
    .filter((el) => Number(el) && !/([1-5])\1/.test(el) && el);
  return babbling.length;
}
