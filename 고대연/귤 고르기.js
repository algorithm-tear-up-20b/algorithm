function solution(k, tangerine) {
  //귤 k를 고를 때 서로 다른 종류의 귤을 고를 경우의수 의 최솟값은 귤을 k개 만드는 방법중 최소한의 종류로 만드는 것과 같음.
  //따라서
  //tangerine의 각 요소의 빈도수 총합을 구하고 총합이 k와같거나 넘어가는것중 최솟값
  const obj = {};
  tangerine.forEach((el) => (obj[el] = (obj[el] || 0) + 1));
  const arr = Object.entries(obj).sort((a, b) => b[1] - a[1]);
  
  //정렬한것중 총합이 k개가넘거나 같을 때까지 진행
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum += arr[i][1];
    if (sum >= k) return i + 1;
  }
}

/*
정확성  테스트
테스트 1 〉	통과 (3.10ms, 37.2MB)
테스트 2 〉	통과 (6.86ms, 37.2MB)
테스트 3 〉	통과 (5.03ms, 37.3MB)
테스트 4 〉	통과 (2.85ms, 37.2MB)
테스트 5 〉	통과 (3.11ms, 37.2MB)
테스트 6 〉	통과 (4.26ms, 37.2MB)
테스트 7 〉	통과 (2.99ms, 37.2MB)
테스트 8 〉	통과 (2.77ms, 37.1MB)
테스트 9 〉	통과 (2.90ms, 37.2MB)
테스트 10 〉	통과 (3.50ms, 37.2MB)
테스트 11 〉	통과 (0.19ms, 33.4MB)
테스트 12 〉	통과 (0.07ms, 33.5MB)
테스트 13 〉	통과 (0.11ms, 33.5MB)
테스트 14 〉	통과 (0.07ms, 33.4MB)
테스트 15 〉	통과 (0.11ms, 33.5MB)
테스트 16 〉	통과 (0.11ms, 33.4MB)
테스트 17 〉	통과 (0.08ms, 33.4MB)
테스트 18 〉	통과 (0.07ms, 33.5MB)
테스트 19 〉	통과 (0.07ms, 33.4MB)
테스트 20 〉	통과 (0.09ms, 33.5MB)
테스트 21 〉	통과 (0.25ms, 33.6MB)
테스트 22 〉	통과 (0.44ms, 33.6MB)
테스트 23 〉	통과 (0.49ms, 33.6MB)
테스트 24 〉	통과 (1.02ms, 33.9MB)
테스트 25 〉	통과 (5.96ms, 36.8MB)
테스트 26 〉	통과 (17.04ms, 42.1MB)
테스트 27 〉	통과 (125.16ms, 75.7MB)
테스트 28 〉	통과 (48.78ms, 50.1MB)
테스트 29 〉	통과 (104.37ms, 63.3MB)
테스트 30 〉	통과 (130.00ms, 75.7MB)
테스트 31 〉	통과 (11.54ms, 37.5MB)
테스트 32 〉	통과 (13.53ms, 38.1MB)
테스트 33 〉	통과 (100.11ms, 63.3MB)
테스트 34 〉	통과 (93.68ms, 63.5MB)
*/