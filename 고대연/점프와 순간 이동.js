/*
정확성  테스트
테스트 1 〉	통과 (0.03ms, 33.4MB)
테스트 2 〉	통과 (0.07ms, 33.4MB)
테스트 3 〉	통과 (0.04ms, 33.5MB)
테스트 4 〉	통과 (0.04ms, 33.5MB)
테스트 5 〉	통과 (0.04ms, 33.4MB)
테스트 6 〉	통과 (0.04ms, 33.5MB)
테스트 7 〉	통과 (0.04ms, 33.5MB)
테스트 8 〉	통과 (0.06ms, 33.4MB)
테스트 9 〉	통과 (0.04ms, 33.5MB)
테스트 10 〉	통과 (0.04ms, 33.5MB)
테스트 11 〉	통과 (0.05ms, 33.5MB)
테스트 12 〉	통과 (0.05ms, 33.5MB)
테스트 13 〉	통과 (0.04ms, 33.5MB)
테스트 14 〉	통과 (0.04ms, 33.4MB)
테스트 15 〉	통과 (0.04ms, 33.5MB)
테스트 16 〉	통과 (0.04ms, 33.4MB)
테스트 17 〉	통과 (0.03ms, 33.4MB)
테스트 18 〉	통과 (0.03ms, 33.4MB)
효율성  테스트
테스트 1 〉	통과 (0.04ms, 33.4MB)
테스트 2 〉	통과 (0.04ms, 33.5MB)
테스트 3 〉	통과 (0.04ms, 33.4MB)
테스트 4 〉	통과 (0.07ms, 33.5MB)
테스트 5 〉	통과 (0.04ms, 33.5MB)
테스트 6 〉	통과 (0.06ms, 33.4MB)
테스트 7 〉	통과 (0.06ms, 33.5MB)
테스트 8 〉	통과 (0.04ms, 33.4MB)
테스트 9 〉	통과 (0.04ms, 33.4MB)
테스트 10 〉	통과 (0.04ms, 33.4MB)
40분
미리 나오는 값을 예상해서 써보는 습관이 필요할듯
*/
function solution(n) {
  // 매순간 배터리 소모량을 생각해보면
  // 7일 경우 1 0 1 0 1 111
  // 6일 경우 1 0 1 0   110
  // 5일 경우 1 0 0 1   101

  let count = 0;

  while (1) {
    count += n % 2;
    n = Math.floor(n / 2);
    if (n === 0) return count;
  }

  // count를 더하지말고 배열에 매순간 추가한다면 이게 이진수 이므로 이진수의 1만 세서 리턴하는것과 같음
  // n = n.toString(2);
  // for(let i =0 ; i < n.length ; i++){
  //     if(n[i]==='1') count++;
  // }
  // return count
}
