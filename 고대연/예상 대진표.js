/*
정확성  테스트
테스트 1 〉	통과 (0.07ms, 33.6MB)
테스트 2 〉	통과 (0.04ms, 33.5MB)
테스트 3 〉	통과 (0.04ms, 33.6MB)
테스트 4 〉	통과 (0.04ms, 33.5MB)
테스트 5 〉	통과 (0.04ms, 33.5MB)
테스트 6 〉	통과 (0.04ms, 33.6MB)
테스트 7 〉	통과 (0.04ms, 33.4MB)
테스트 8 〉	통과 (0.04ms, 33.5MB)
테스트 9 〉	통과 (0.04ms, 33.5MB)
테스트 10 〉	통과 (0.04ms, 33.5MB)
테스트 11 〉	통과 (0.04ms, 33.4MB)
테스트 12 〉	통과 (0.06ms, 33.4MB)
테스트 13 〉	통과 (0.04ms, 33.5MB)
테스트 14 〉	통과 (0.04ms, 33.5MB)
테스트 15 〉	통과 (0.06ms, 33.5MB)
테스트 16 〉	통과 (0.06ms, 33.4MB)
테스트 17 〉	통과 (0.04ms, 33.4MB)
테스트 18 〉	통과 (0.06ms, 33.4MB)
테스트 19 〉	통과 (0.04ms, 33.4MB)
테스트 20 〉	통과 (0.04ms, 33.6MB)
테스트 21 〉	통과 (0.11ms, 33.4MB)
테스트 22 〉	통과 (0.04ms, 33.5MB)
테스트 23 〉	통과 (0.04ms, 33.4MB)
테스트 24 〉	통과 (0.04ms, 33.4MB)
테스트 25 〉	통과 (0.04ms, 33.5MB)
테스트 26 〉	통과 (0.04ms, 33.5MB)
테스트 27 〉	통과 (0.12ms, 33.4MB)
테스트 28 〉	통과 (0.12ms, 33.5MB)
테스트 29 〉	통과 (0.12ms, 33.5MB)
테스트 30 〉	통과 (0.11ms, 33.5MB)
테스트 31 〉	통과 (0.04ms, 33.4MB)
테스트 32 〉	통과 (0.04ms, 33.5MB)
테스트 33 〉	통과 (0.12ms, 33.5MB)
테스트 34 〉	통과 (0.13ms, 33.5MB)
*/

function solution(n, a, b) {
  /*
        다음 게임의 번호는 현재번호/2의 반올림
        2로 나누어서 떨어지는 번호의 -1한 번호와 대결함
    */

  for (let i = 1; ; i++) {
    if (a % 2 === 0) {
      if (a - 1 === b) return i;
    } else if (b % 2 === 0) {
      if (b - 1 === a) return i;
    }

    a = Math.round(a / 2);
    b = Math.round(b / 2);
  }
}
