function solution(n, left, right) {
  /*
  직접 2차원 배열로 만들면 범위가 크기때문에 필요한 메모리가 너무 많아진다.
  따라서 문제에서 필요한부분만 배열로 만들어서 return해야한다.
  2차원배열로 생각했을때 첫번째 배열은 0*n + n 까지 두번째는 1 * n + n  ... n * n + 1까지의 배열이있다.
  배열의 인덱스를 구할때 an + b 로 표현이 가능하고 n/a : y좌표, n/b는 x좌표로 뜻한다.
  해당 좌표의 값은 x,y중 큰값의 +1을 한것과 같다.
  */

  const arr = [];
  for (let i = left; i <= right; i++)
    arr.push(Math.max(i % n, Math.floor(i / n)) + 1);
  return arr;
}

/*
정확성  테스트
테스트 1 〉	통과 (5.07ms, 43.3MB)
테스트 2 〉	통과 (6.05ms, 50MB)
테스트 3 〉	통과 (4.82ms, 49.6MB)
테스트 4 〉	통과 (0.13ms, 33.5MB)
테스트 5 〉	통과 (0.12ms, 33.4MB)
테스트 6 〉	통과 (4.86ms, 43.3MB)
테스트 7 〉	통과 (4.70ms, 43.4MB)
테스트 8 〉	통과 (4.72ms, 43.5MB)
테스트 9 〉	통과 (4.89ms, 44.3MB)
테스트 10 〉	통과 (4.88ms, 44.4MB)
테스트 11 〉	통과 (4.89ms, 44MB)
테스트 12 〉	통과 (5.17ms, 47.2MB)
테스트 13 〉	통과 (5.31ms, 47.6MB)
테스트 14 〉	통과 (6.15ms, 44.2MB)
테스트 15 〉	통과 (5.16ms, 49.4MB)
테스트 16 〉	통과 (5.25ms, 50.1MB)
테스트 17 〉	통과 (5.22ms, 44.8MB)
테스트 18 〉	통과 (5.37ms, 50.2MB)
테스트 19 〉	통과 (5.14ms, 50.1MB)
테스트 20 〉	통과 (5.16ms, 43.6MB)
*/
