/*[PGS] 귤 고르기 /LV.2 / 40분*/

/*
[문제]
- 수확한 귤 중 k 개를 골라 상자에 담아 판매하려고 함. 
- 귤을 크기별로 분류했을 때 서로 다른 종류의 수 최소화
- 귤 갯수 k, 귤 크기 배열이 주어질 때 k 개를 고를 때 종류의 최솟값을 구해야함.

[접근]
- Map 객체를 만들어서 각 종류별로 몇 개가 있는지 카운팅
- 갯수가 많은 순서대로 카운트를 올려서 최소 종류를 구하자.
=> 이렇게 했더니 시간도 오래걸리고 몇몇 테스트 케이스를 통과하지 못한다.
=> 정렬 기준이 잘못되었던 것 같다. 레퍼런스를 서치해 코드 리팩토링했다.
*/

function solution(k, tangerine) {
  let count = 0;
  let sum = 0;
  let map = {};

  // map으로 종류별로 갯수를 카운팅
  tangerine.forEach(tan => (map[tan] = ++map[tan] || 1));

  // 필요한 데이터는 각 종류별로 존재하는 갯수이므로, values 메서드 활용
  // 각 값을 내림차순 정렬
  const tans = Object.values(map).sort((a, b) => b - a);

  // 하나씩 반복하면서 sum에 누적
  // sum 이 k 이상이 되면 더이상 반복하지 않아도됨.
  for (let tan of tans) {
    sum += tan;
    count++;
    if (sum >= k) return count;
  }
}

console.log(solution(2, [1, 1, 1, 1, 2, 2, 2, 3]));

/*
테스트 1 〉	통과 (2.91ms, 37.2MB)
테스트 2 〉	통과 (4.94ms, 38.2MB)
테스트 3 〉	통과 (3.29ms, 37.2MB)
테스트 4 〉	통과 (3.29ms, 37.3MB)
테스트 5 〉	통과 (3.27ms, 37MB)
테스트 6 〉	통과 (3.79ms, 38.2MB)
테스트 7 〉	통과 (2.86ms, 36.9MB)
테스트 8 〉	통과 (2.89ms, 36.8MB)
테스트 9 〉	통과 (2.89ms, 37.2MB)
테스트 10 〉	통과 (2.94ms, 37.2MB)
테스트 11 〉	통과 (0.19ms, 33.5MB)
테스트 12 〉	통과 (0.07ms, 33.5MB)
테스트 13 〉	통과 (0.08ms, 33.3MB)
테스트 14 〉	통과 (0.07ms, 33.4MB)
테스트 15 〉	통과 (0.08ms, 33.5MB)
테스트 16 〉	통과 (0.07ms, 33.4MB)
테스트 17 〉	통과 (0.08ms, 33.4MB)
테스트 18 〉	통과 (0.08ms, 33.4MB)
테스트 19 〉	통과 (0.07ms, 33.4MB)
테스트 20 〉	통과 (0.08ms, 33.5MB)
테스트 21 〉	통과 (0.23ms, 33.5MB)
테스트 22 〉	통과 (0.32ms, 33.4MB)
테스트 23 〉	통과 (0.35ms, 33.6MB)
테스트 24 〉	통과 (0.70ms, 33.6MB)
테스트 25 〉	통과 (3.53ms, 36.5MB)
테스트 26 〉	통과 (14.38ms, 41MB)
테스트 27 〉	통과 (90.68ms, 63.7MB)
테스트 28 〉	통과 (42.63ms, 46.7MB)
테스트 29 〉	통과 (67.20ms, 50.6MB)
테스트 30 〉	통과 (89.89ms, 63.7MB)
테스트 31 〉	통과 (19.08ms, 37.4MB)
테스트 32 〉	통과 (20.86ms, 37.8MB)
테스트 33 〉	통과 (72.22ms, 54MB)
테스트 34 〉	통과 (64.73ms, 50.6MB)
*/
